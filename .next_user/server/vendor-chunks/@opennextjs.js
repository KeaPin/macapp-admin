"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@opennextjs";
exports.ids = ["vendor-chunks/@opennextjs"];
exports.modules = {

/***/ "(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCloudflareContext: () => (/* binding */ getCloudflareContext),\n/* harmony export */   initOpenNextCloudflareForDev: () => (/* binding */ initOpenNextCloudflareForDev)\n/* harmony export */ });\n/**\n * Symbol used as an index in the global scope to set and retrieve the Cloudflare context\n *\n * This is used both in production (in the actual built worker) and in development (`next dev`)\n *\n * Note: this symbol needs to be kept in sync with the one used in `src/cli/templates/worker.ts`\n */\nconst cloudflareContextSymbol = Symbol.for(\"__cloudflare-context__\");\nfunction getCloudflareContext(options = { async: false }) {\n    return options.async ? getCloudflareContextAsync() : getCloudflareContextSync();\n}\n/**\n * Get the cloudflare context from the current global scope\n */\nfunction getCloudflareContextFromGlobalScope() {\n    const global = globalThis;\n    return global[cloudflareContextSymbol];\n}\n/**\n * Detects whether the current code is being evaluated in a statically generated route\n */\nfunction inSSG() {\n    const global = globalThis;\n    // Note: Next.js sets globalThis.__NEXT_DATA__.nextExport to true for SSG routes\n    // source: https://github.com/vercel/next.js/blob/4e394608423/packages/next/src/export/worker.ts#L55-L57)\n    return global.__NEXT_DATA__?.nextExport === true;\n}\n/**\n * Utility to get the current Cloudflare context in sync mode\n */\nfunction getCloudflareContextSync() {\n    const cloudflareContext = getCloudflareContextFromGlobalScope();\n    if (cloudflareContext) {\n        return cloudflareContext;\n    }\n    // The sync mode of `getCloudflareContext`, relies on the context being set on the global state\n    // by either the worker entrypoint (in prod) or by `initOpenNextCloudflareForDev` (in dev), neither\n    // can work during SSG since for SSG Next.js creates (jest) workers that don't get access to the\n    // normal global state so we throw with a helpful error message.\n    if (inSSG()) {\n        throw new Error(`\\n\\nERROR: \\`getCloudflareContext\\` has been called in sync mode in either a static route or at the top level of a non-static one,` +\n            ` both cases are not allowed but can be solved by either:\\n` +\n            `  - make sure that the call is not at the top level and that the route is not static\\n` +\n            `  - call \\`getCloudflareContext({async: true})\\` to use the \\`async\\` mode\\n` +\n            `  - avoid calling \\`getCloudflareContext\\` in the route\\n`);\n    }\n    throw new Error(initOpenNextCloudflareForDevErrorMsg);\n}\n/**\n * Utility to get the current Cloudflare context in async mode\n */\nasync function getCloudflareContextAsync() {\n    const cloudflareContext = getCloudflareContextFromGlobalScope();\n    if (cloudflareContext) {\n        return cloudflareContext;\n    }\n    // Note: Next.js sets process.env.NEXT_RUNTIME to 'nodejs' when the runtime in use is the node.js one\n    // We want to detect when the runtime is the node.js one so that during development (`next dev`) we know wether\n    // we are or not in a node.js process and that access to wrangler's node.js apis\n    const inNodejsRuntime = \"nodejs\" === \"nodejs\";\n    if (inNodejsRuntime || inSSG()) {\n        // we're in a node.js process and also in \"async mode\" so we can use wrangler to asynchronously get the context\n        const cloudflareContext = await getCloudflareContextFromWrangler();\n        addCloudflareContextToNodejsGlobal(cloudflareContext);\n        return cloudflareContext;\n    }\n    throw new Error(initOpenNextCloudflareForDevErrorMsg);\n}\n/**\n * Performs some initial setup to integrate as best as possible the local Next.js dev server (run via `next dev`)\n * with the open-next Cloudflare adapter\n *\n * Note: this function should only be called inside the Next.js config file, and although async it doesn't need to be `await`ed\n * @param options options on how the function should operate and if/where to persist the platform data\n */\nasync function initOpenNextCloudflareForDev(options) {\n    const shouldInitializationRun = shouldContextInitializationRun();\n    if (!shouldInitializationRun)\n        return;\n    if (options?.environment && process.env.NEXT_DEV_WRANGLER_ENV) {\n        console.warn(`'initOpenNextCloudflareForDev' has been called with an environment option while NEXT_DEV_WRANGLER_ENV is set.` +\n            ` NEXT_DEV_WRANGLER_ENV will be ignored and the environment will be set to: '${options.environment}'`);\n    }\n    const context = await getCloudflareContextFromWrangler(options);\n    addCloudflareContextToNodejsGlobal(context);\n    await monkeyPatchVmModuleEdgeContext(context);\n}\n/**\n * Next dev server imports the config file twice (in two different processes, making it hard to track),\n * this causes the initialization to run twice as well, to keep things clean, not allocate extra\n * resources (i.e. instantiate two miniflare instances) and avoid extra potential logs, it would be best\n * to run the initialization only once, this function is used to try to make it so that it does, it returns\n * a flag which indicates if the initialization should run in the current process or not.\n *\n * @returns boolean indicating if the initialization should run\n */\nfunction shouldContextInitializationRun() {\n    // via debugging we've seen that AsyncLocalStorage is only set in one of the\n    // two processes so we're using it as the differentiator between the two\n    const AsyncLocalStorage = globalThis[\"AsyncLocalStorage\"];\n    return !!AsyncLocalStorage;\n}\n/**\n * Adds the cloudflare context to the global scope of the current node.js process, enabling\n * future calls to `getCloudflareContext` to retrieve and return such context\n *\n * @param cloudflareContext the cloudflare context to add to the node.sj global scope\n */\nfunction addCloudflareContextToNodejsGlobal(cloudflareContext) {\n    const global = globalThis;\n    global[cloudflareContextSymbol] = cloudflareContext;\n}\n/**\n * Next.js uses the Node.js vm module's `runInContext()` function to evaluate edge functions\n * in a runtime context that tries to simulate as accurately as possible the actual production runtime\n * behavior, see: https://github.com/vercel/next.js/blob/9a1cd3/packages/next/src/server/web/sandbox/context.ts#L525-L527\n *\n * This function monkey-patches the Node.js `vm` module to override the `runInContext()` function so that the\n * cloudflare context is added to the runtime context's global scope before edge functions are evaluated\n *\n * @param cloudflareContext the cloudflare context to patch onto the \"edge\" runtime context global scope\n */\nasync function monkeyPatchVmModuleEdgeContext(cloudflareContext) {\n    const require = (await import(/* webpackIgnore: true */ `${\"__module\".replaceAll(\"_\", \"\")}`)).default.createRequire(\"file:///Users/tink/Desktop/TinkProject/macapp-admin/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\");\n    // eslint-disable-next-line unicorn/prefer-node-protocol -- the `next dev` compiler doesn't accept the node prefix\n    const vmModule = require(\"vm\");\n    const originalRunInContext = vmModule.runInContext.bind(vmModule);\n    vmModule.runInContext = (code, contextifiedObject, options) => {\n        const runtimeContext = contextifiedObject;\n        runtimeContext[cloudflareContextSymbol] ??= cloudflareContext;\n        return originalRunInContext(code, contextifiedObject, options);\n    };\n}\n/**\n * Gets a cloudflare context object from wrangler\n *\n * @returns the cloudflare context ready for use\n */\nasync function getCloudflareContextFromWrangler(options) {\n    // Note: we never want wrangler to be bundled in the Next.js app, that's why the import below looks like it does\n    const { getPlatformProxy } = await import(/* webpackIgnore: true */ `${\"__wrangler\".replaceAll(\"_\", \"\")}`);\n    // This allows the selection of a wrangler environment while running in next dev mode\n    const environment = options?.environment ?? process.env.NEXT_DEV_WRANGLER_ENV;\n    const { env, cf, ctx } = await getPlatformProxy({\n        ...options,\n        environment,\n    });\n    return {\n        env,\n        cf: cf,\n        ctx: ctx,\n    };\n}\n// In production the cloudflare context is initialized by the worker so it is always available.\n// During local development (`next dev`) it might be missing only if the developers hasn't called\n// the `initOpenNextCloudflareForDev` function in their Next.js config file\nconst initOpenNextCloudflareForDevErrorMsg = `\\n\\nERROR: \\`getCloudflareContext\\` has been called without having called` +\n    ` \\`initOpenNextCloudflareForDev\\` from the Next.js config file.\\n` +\n    `You should update your Next.js config file as shown below:\\n\\n` +\n    \"   ```\\n   // next.config.mjs\\n\\n\" +\n    `   import { initOpenNextCloudflareForDev } from \"@opennextjs/cloudflare\";\\n\\n` +\n    `   initOpenNextCloudflareForDev();\\n\\n` +\n    \"   const nextConfig = { ... };\\n\" +\n    \"   export default nextConfig;\\n\" +\n    \"   ```\\n\" +\n    \"\\n\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/config.js":
/*!****************************************************************!*\
  !*** ./node_modules/@opennextjs/cloudflare/dist/api/config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineCloudflareConfig: () => (/* binding */ defineCloudflareConfig),\n/* harmony export */   getOpenNextConfig: () => (/* binding */ getOpenNextConfig)\n/* harmony export */ });\n/**\n * Defines the OpenNext configuration that targets the Cloudflare adapter\n *\n * @param config options that enabled you to configure the application's behavior\n * @returns the OpenNext configuration object\n */\nfunction defineCloudflareConfig(config = {}) {\n    const { incrementalCache, tagCache, queue, cachePurge, enableCacheInterception = false, routePreloadingBehavior = \"none\", } = config;\n    return {\n        default: {\n            override: {\n                wrapper: \"cloudflare-node\",\n                converter: \"edge\",\n                proxyExternalRequest: \"fetch\",\n                incrementalCache: resolveIncrementalCache(incrementalCache),\n                tagCache: resolveTagCache(tagCache),\n                queue: resolveQueue(queue),\n                cdnInvalidation: resolveCdnInvalidation(cachePurge),\n            },\n            routePreloadingBehavior,\n        },\n        // node:crypto is used to compute cache keys\n        edgeExternals: [\"node:crypto\"],\n        cloudflare: {\n            useWorkerdCondition: true,\n        },\n        dangerous: {\n            enableCacheInterception,\n        },\n        middleware: {\n            external: true,\n            override: {\n                wrapper: \"cloudflare-edge\",\n                converter: \"edge\",\n                proxyExternalRequest: \"fetch\",\n                incrementalCache: resolveIncrementalCache(incrementalCache),\n                tagCache: resolveTagCache(tagCache),\n                queue: resolveQueue(queue),\n            },\n        },\n    };\n}\nfunction resolveIncrementalCache(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\nfunction resolveTagCache(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\nfunction resolveQueue(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\nfunction resolveCdnInvalidation(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\n/**\n * @param buildOpts build options from AWS\n * @returns The OpenConfig specific to cloudflare\n */\nfunction getOpenNextConfig(buildOpts) {\n    return buildOpts.config;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG9wZW5uZXh0anMvY2xvdWRmbGFyZS9kaXN0L2FwaS9jb25maWcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywyQ0FBMkM7QUFDbEQsWUFBWSxvSEFBb0g7QUFDaEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3RpbmsvRGVza3RvcC9UaW5rUHJvamVjdC9tYWNhcHAtYWRtaW4vbm9kZV9tb2R1bGVzL0BvcGVubmV4dGpzL2Nsb3VkZmxhcmUvZGlzdC9hcGkvY29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGVmaW5lcyB0aGUgT3Blbk5leHQgY29uZmlndXJhdGlvbiB0aGF0IHRhcmdldHMgdGhlIENsb3VkZmxhcmUgYWRhcHRlclxuICpcbiAqIEBwYXJhbSBjb25maWcgb3B0aW9ucyB0aGF0IGVuYWJsZWQgeW91IHRvIGNvbmZpZ3VyZSB0aGUgYXBwbGljYXRpb24ncyBiZWhhdmlvclxuICogQHJldHVybnMgdGhlIE9wZW5OZXh0IGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVDbG91ZGZsYXJlQ29uZmlnKGNvbmZpZyA9IHt9KSB7XG4gICAgY29uc3QgeyBpbmNyZW1lbnRhbENhY2hlLCB0YWdDYWNoZSwgcXVldWUsIGNhY2hlUHVyZ2UsIGVuYWJsZUNhY2hlSW50ZXJjZXB0aW9uID0gZmFsc2UsIHJvdXRlUHJlbG9hZGluZ0JlaGF2aW9yID0gXCJub25lXCIsIH0gPSBjb25maWc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgb3ZlcnJpZGU6IHtcbiAgICAgICAgICAgICAgICB3cmFwcGVyOiBcImNsb3VkZmxhcmUtbm9kZVwiLFxuICAgICAgICAgICAgICAgIGNvbnZlcnRlcjogXCJlZGdlXCIsXG4gICAgICAgICAgICAgICAgcHJveHlFeHRlcm5hbFJlcXVlc3Q6IFwiZmV0Y2hcIixcbiAgICAgICAgICAgICAgICBpbmNyZW1lbnRhbENhY2hlOiByZXNvbHZlSW5jcmVtZW50YWxDYWNoZShpbmNyZW1lbnRhbENhY2hlKSxcbiAgICAgICAgICAgICAgICB0YWdDYWNoZTogcmVzb2x2ZVRhZ0NhY2hlKHRhZ0NhY2hlKSxcbiAgICAgICAgICAgICAgICBxdWV1ZTogcmVzb2x2ZVF1ZXVlKHF1ZXVlKSxcbiAgICAgICAgICAgICAgICBjZG5JbnZhbGlkYXRpb246IHJlc29sdmVDZG5JbnZhbGlkYXRpb24oY2FjaGVQdXJnZSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcm91dGVQcmVsb2FkaW5nQmVoYXZpb3IsXG4gICAgICAgIH0sXG4gICAgICAgIC8vIG5vZGU6Y3J5cHRvIGlzIHVzZWQgdG8gY29tcHV0ZSBjYWNoZSBrZXlzXG4gICAgICAgIGVkZ2VFeHRlcm5hbHM6IFtcIm5vZGU6Y3J5cHRvXCJdLFxuICAgICAgICBjbG91ZGZsYXJlOiB7XG4gICAgICAgICAgICB1c2VXb3JrZXJkQ29uZGl0aW9uOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBkYW5nZXJvdXM6IHtcbiAgICAgICAgICAgIGVuYWJsZUNhY2hlSW50ZXJjZXB0aW9uLFxuICAgICAgICB9LFxuICAgICAgICBtaWRkbGV3YXJlOiB7XG4gICAgICAgICAgICBleHRlcm5hbDogdHJ1ZSxcbiAgICAgICAgICAgIG92ZXJyaWRlOiB7XG4gICAgICAgICAgICAgICAgd3JhcHBlcjogXCJjbG91ZGZsYXJlLWVkZ2VcIixcbiAgICAgICAgICAgICAgICBjb252ZXJ0ZXI6IFwiZWRnZVwiLFxuICAgICAgICAgICAgICAgIHByb3h5RXh0ZXJuYWxSZXF1ZXN0OiBcImZldGNoXCIsXG4gICAgICAgICAgICAgICAgaW5jcmVtZW50YWxDYWNoZTogcmVzb2x2ZUluY3JlbWVudGFsQ2FjaGUoaW5jcmVtZW50YWxDYWNoZSksXG4gICAgICAgICAgICAgICAgdGFnQ2FjaGU6IHJlc29sdmVUYWdDYWNoZSh0YWdDYWNoZSksXG4gICAgICAgICAgICAgICAgcXVldWU6IHJlc29sdmVRdWV1ZShxdWV1ZSksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH07XG59XG5mdW5jdGlvbiByZXNvbHZlSW5jcmVtZW50YWxDYWNoZSh2YWx1ZSA9IFwiZHVtbXlcIikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyB2YWx1ZSA6ICgpID0+IHZhbHVlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRhZ0NhY2hlKHZhbHVlID0gXCJkdW1teVwiKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHZhbHVlIDogKCkgPT4gdmFsdWU7XG59XG5mdW5jdGlvbiByZXNvbHZlUXVldWUodmFsdWUgPSBcImR1bW15XCIpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdmFsdWUgOiAoKSA9PiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVDZG5JbnZhbGlkYXRpb24odmFsdWUgPSBcImR1bW15XCIpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdmFsdWUgOiAoKSA9PiB2YWx1ZTtcbn1cbi8qKlxuICogQHBhcmFtIGJ1aWxkT3B0cyBidWlsZCBvcHRpb25zIGZyb20gQVdTXG4gKiBAcmV0dXJucyBUaGUgT3BlbkNvbmZpZyBzcGVjaWZpYyB0byBjbG91ZGZsYXJlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVuTmV4dENvbmZpZyhidWlsZE9wdHMpIHtcbiAgICByZXR1cm4gYnVpbGRPcHRzLmNvbmZpZztcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opennextjs/cloudflare/dist/api/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineCloudflareConfig: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.defineCloudflareConfig),\n/* harmony export */   getCloudflareContext: () => (/* reexport safe */ _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__.getCloudflareContext),\n/* harmony export */   initOpenNextCloudflareForDev: () => (/* reexport safe */ _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__.initOpenNextCloudflareForDev)\n/* harmony export */ });\n/* harmony import */ var _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cloudflare-context.js */ \"(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/config.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG9wZW5uZXh0anMvY2xvdWRmbGFyZS9kaXN0L2FwaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF3QztBQUNhIiwic291cmNlcyI6WyIvVXNlcnMvdGluay9EZXNrdG9wL1RpbmtQcm9qZWN0L21hY2FwcC1hZG1pbi9ub2RlX21vZHVsZXMvQG9wZW5uZXh0anMvY2xvdWRmbGFyZS9kaXN0L2FwaS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9jbG91ZGZsYXJlLWNvbnRleHQuanNcIjtcbmV4cG9ydCB7IGRlZmluZUNsb3VkZmxhcmVDb25maWcgfSBmcm9tIFwiLi9jb25maWcuanNcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/index.js\n");

/***/ })

};
;